#include <SDL2/SDL.h>
#include <omp.h>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <string>

// Screen dimensions
const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
int NUM_CIRCLES = 100;  // Default number of circles, can be modified via command line

// Struct representing a circle with position, size, velocity, and color properties
struct Circle {
    int x, y;           // Position of the circle
    int radius;         // Radius of the circle
    int dx, dy;         // Velocity (direction and speed) in x and y
    SDL_Color color;    // Color of the circle
};

// Vector to store all the circles
std::vector<Circle> circles;

// Initialize the circles with random positions, velocities, sizes, and colors
void initialize_circles() {
    circles.clear(); // Ensure the circles vector is empty before initializing
    srand(time(NULL)); // Seed the random number generator

    // Generate properties for each circle and store them in the vector
    for (int i = 0; i < NUM_CIRCLES; ++i) {
        Circle c;
        c.x = rand() % SCREEN_WIDTH;
        c.y = rand() % SCREEN_HEIGHT;
        c.radius = 10 + rand() % 40;
        c.dx = (rand() % 5) - 2; // Random speed in x direction
        c.dy = (rand() % 5) - 2; // Random speed in y direction
        
        // Assign a random color to the circle
        c.color = {Uint8(rand() % 256), Uint8(rand() % 256), Uint8(rand() % 256), 255};
        circles.push_back(c);
    }
}

// Draw a circle 
void SDL_RenderDrawCircle(SDL_Renderer* renderer, int x_center, int y_center, int radius) {
    int x = radius;
    int y = 0;
    int p = 1 - radius;

    if (radius == 0) {
        SDL_RenderDrawPoint(renderer, x_center, y_center);
        return;
    }

    // Drawing four initial points for given radius
    SDL_RenderDrawPoint(renderer, x_center + radius, y_center);
    SDL_RenderDrawPoint(renderer, x_center - radius, y_center);
    SDL_RenderDrawPoint(renderer, x_center, y_center + radius);
    SDL_RenderDrawPoint(renderer, x_center, y_center - radius);

    //Bresenham's algorithm 
    while (x > y) {
        y++;
        if (p <= 0) {
            p = p + 2 * y + 1;
        } else {
            x--;
            p = p + 2 * y - 2 * x + 1;
        }

        if (x < y)
            break;

        // Drawing points generated by the algorithm
        SDL_RenderDrawPoint(renderer, x_center + x, y_center + y);
        SDL_RenderDrawPoint(renderer, x_center - x, y_center + y);
        SDL_RenderDrawPoint(renderer, x_center + x, y_center - y);
        SDL_RenderDrawPoint(renderer, x_center - x, y_center - y);

        if (x != y) {
            SDL_RenderDrawPoint(renderer, x_center + y, y_center + x);
            SDL_RenderDrawPoint(renderer, x_center - y, y_center + x);
            SDL_RenderDrawPoint(renderer, x_center + y, y_center - x);
            SDL_RenderDrawPoint(renderer, x_center - y, y_center - x);
        }
    }
}

// Move circles based on their velocity in a sequential manner
void move_circles_sequential() {
    for (int i = 0; i < NUM_CIRCLES; ++i) {
        circles[i].x += circles[i].dx;
        circles[i].y += circles[i].dy;

        // Boundary check: If a circle goes beyond the screen, reverse its direction
        if (circles[i].x < 0 || circles[i].x > SCREEN_WIDTH) {
            circles[i].dx = -circles[i].dx;
        }
        if (circles[i].y < 0 || circles[i].y > SCREEN_HEIGHT) {
            circles[i].dy = -circles[i].dy;
        }
    }
}



// Main loop for the sequential screensaver
int main_sequential() {
    SDL_Init(SDL_INIT_VIDEO); // Initialize SDL video subsystem
    SDL_Window* window = SDL_CreateWindow("Screensaver Sequential", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED); // Create a new renderer
    
    bool running = true; // Flag to keep track of the running state
    SDL_Event e;
    while (running) {
        while (SDL_PollEvent(&e) != 0) {
            // Check for quit event to exit the loop
            if (e.type == SDL_QUIT) {
                running = false;
            }
        }
        
        // Clear the screen
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // Move the circles and draw them
        move_circles_sequential();
        for (const Circle& c : circles) {
            SDL_SetRenderDrawColor(renderer, c.color.r, c.color.g, c.color.b, c.color.a);
            SDL_RenderDrawCircle(renderer, c.x, c.y, c.radius);
        }

        // Update the screen with the new render
        SDL_RenderPresent(renderer);
    }

    // Clean up resources
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}


// Main entry point for the program
int main(int argc, char* argv[]) {
    // Check if the number of circles is provided as a command-line argument
    if (argc > 1) {
        int num = std::stoi(argv[1]);
        if (num > 0) {
            NUM_CIRCLES = num; // Update global circle count
        } else {
            std::cerr << "Please provide a positive integer for the number of circles." << std::endl;
            return 1;
        }
    }
    initialize_circles(); // Initialize circles based on NUM_CIRCLES value

    return main_sequential();

}
